{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","width","nested","paddingLeft","spacing","App","darkTheme","createMuiTheme","palette","type","classes","useState","isLoading","setIsLoading","users","setUsers","getUsers","a","fetch","response","json","responseUsers","useEffect","ThemeProvider","CssBaseline","AppBar","position","Toolbar","Typography","component","variant","color","noWrap","Container","maxWidth","List","aria-labelledby","subheader","ListSubheader","id","className","map","item","index","ListItem","key","ListItemIcon","Skeleton","animation","height","ListItemText","primary","secondary","user","button","onClick","userIndex","newUsers","songsOpened","handleClick","AccountCircle","name","surname","favoriteSongs","length","ExpandLess","ExpandMore","Collapse","in","timeout","unmountOnExit","disablePadding","favoriteSong","_id","MusicNote","artist","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.93e22301.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  createMuiTheme,\r\n  ThemeProvider,\r\n  makeStyles,\r\n} from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  List,\r\n  ListItemText,\r\n  Container,\r\n  ListSubheader,\r\n  ListItem,\r\n  ListItemIcon,\r\n  Collapse,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\nimport {\r\n  ExpandLess,\r\n  ExpandMore,\r\n  AccountCircle as AccountCircleIcon,\r\n  MusicNote,\r\n} from \"@material-ui/icons\";\r\nimport \"./App.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  nested: {\r\n    paddingLeft: theme.spacing(4),\r\n  },\r\n}));\r\n\r\nconst App = () => {\r\n  const darkTheme = createMuiTheme({\r\n    palette: {\r\n      type: \"dark\",\r\n    },\r\n  });\r\n\r\n  const classes = useStyles();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [users, setUsers] = useState([]);\r\n\r\n  const getUsers = async () => {\r\n    const response = await fetch(\"https://mateify-api.herokuapp.com/users\");\r\n    const responseUsers = await response.json();\r\n\r\n    setUsers(responseUsers);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUsers();\r\n  }, []);\r\n\r\n  const handleClick = (userIndex) => {\r\n    const newUsers = [...users];\r\n    newUsers[userIndex].songsOpened = !newUsers[userIndex].songsOpened;\r\n    setUsers(newUsers);\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={darkTheme}>\r\n      <CssBaseline />\r\n      <AppBar position=\"relative\">\r\n        <Toolbar>\r\n          <Typography component=\"h1\" variant=\"h6\" color=\"inherit\" noWrap>\r\n            Mateify\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <main>\r\n        <Container maxWidth=\"lg\">\r\n          <List\r\n            component=\"nav\"\r\n            aria-labelledby=\"nested-list-subheader\"\r\n            subheader={\r\n              <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n                Users list\r\n              </ListSubheader>\r\n            }\r\n            className={classes.root}\r\n          >\r\n            {isLoading\r\n              ? [0, 1, 2, 3].map((item, index) => {\r\n                  return (\r\n                    <ListItem key={`skeleton-${index}`}>\r\n                      <ListItemIcon>\r\n                        <Skeleton\r\n                          animation=\"wave\"\r\n                          variant=\"circle\"\r\n                          width={25}\r\n                          height={25}\r\n                        />\r\n                      </ListItemIcon>\r\n                      <ListItemText\r\n                        primary={<Skeleton animation=\"wave\" width=\"80%\" />}\r\n                        secondary={<Skeleton animation=\"wave\" width=\"20%\" />}\r\n                      />\r\n                    </ListItem>\r\n                  );\r\n                })\r\n              : users.map((user, index) => {\r\n                  return (\r\n                    <div key={`user-${index}`}>\r\n                      <ListItem button onClick={() => handleClick(index)}>\r\n                        <ListItemIcon>\r\n                          <AccountCircleIcon />\r\n                        </ListItemIcon>\r\n                        <ListItemText\r\n                          primary={`${user.name} ${user.surname}`}\r\n                          secondary={`${\r\n                            !user.favoriteSongs.length\r\n                              ? \"\"\r\n                              : `${user.favoriteSongs.length} song${\r\n                                  user.favoriteSongs.length > 1 ? \"s\" : \"\"\r\n                                }`\r\n                          }`}\r\n                        />\r\n                        {user.favoriteSongs.length ? (\r\n                          user.songsOpened ? (\r\n                            <ExpandLess />\r\n                          ) : (\r\n                            <ExpandMore />\r\n                          )\r\n                        ) : null}\r\n                      </ListItem>\r\n                      {user.favoriteSongs.length ? (\r\n                        <Collapse\r\n                          in={user.songsOpened}\r\n                          timeout=\"auto\"\r\n                          unmountOnExit\r\n                        >\r\n                          <List component=\"div\" disablePadding>\r\n                            {user.favoriteSongs.map((favoriteSong, index) => {\r\n                              return (\r\n                                <ListItem\r\n                                  key={`user${user.index}-song-${favoriteSong._id}`}\r\n                                  button\r\n                                  className={classes.nested}\r\n                                >\r\n                                  <ListItemIcon>\r\n                                    <MusicNote />\r\n                                  </ListItemIcon>\r\n                                  <ListItemText\r\n                                    primary={favoriteSong.name}\r\n                                    secondary={favoriteSong.artist}\r\n                                  />\r\n                                </ListItem>\r\n                              );\r\n                            })}\r\n                          </List>\r\n                        </Collapse>\r\n                      ) : null}\r\n                    </div>\r\n                  );\r\n                })}\r\n          </List>\r\n        </Container>\r\n      </main>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}